// Updated package.json
{
  "name": "food-booking-system",
  "version": "1.0.0",
  "main": "server.js",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.0.3",
    "dotenv": "^16.0.3",
    "cors": "^2.8.5",
    "joi": "^17.9.1",
    "jsonwebtoken": "^9.0.0",
    "bcryptjs": "^2.4.3",
    "stripe": "^12.0.0"
  }
}

// Updated .env
PORT=3000
MONGODB_URI=mongodb://localhost:27017/food-booking-system
JWT_SECRET=your_jwt_secret_here
STRIPE_SECRET_KEY=your_stripe_secret_key

// middleware/auth.js
const jwt = require('jsonwebtoken');

exports.auth = async (req, res, next) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ message: 'Authentication required' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};

// models/userModel.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  address: String,
  phone: String
}, { timestamps: true });

userSchema.pre('save', async function(next) {
  if (this.isModified('password')) {
    this.password = await bcrypt.hash(this.password, 8);
  }
  next();
});

module.exports = mongoose.model('User', userSchema);

// validators/validation.js
const Joi = require('joi');

exports.registerValidation = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required(),
  name: Joi.string().required(),
  address: Joi.string(),
  phone: Joi.string()
});

exports.loginValidation = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().required()
});

exports.orderValidation = Joi.object({
  restaurantId: Joi.string().required(),
  items: Joi.array().items(
    Joi.object({
      menuItem: Joi.string().required(),
      quantity: Joi.number().integer().min(1).required(),
      notes: Joi.string()
    })
  ).required(),
  paymentMethodId: Joi.string().required()
});

// controllers/userController.js
const User = require('../models/userModel');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { registerValidation, loginValidation } = require('../validators/validation');

exports.register = async (req, res) => {
  try {
    const { error } = registerValidation.validate(req.body);
    if (error) {
      return res.status(400).json({ message: error.details[0].message });
    }

    const existingUser = await User.findOne({ email: req.body.email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already registered' });
    }

    const user = new User(req.body);
    await user.save();

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);
    res.status(201).json({ user, token });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { error } = loginValidation.validate(req.body);
    if (error) {
      return res.status(400).json({ message: error.details[0].message });
    }

    const user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    const validPassword = await bcrypt.compare(req.body.password, user.password);
    if (!validPassword) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);
    res.json({ user, token });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Updated controllers/restaurantController.js
exports.queryRestaurants = async (req, res) => {
  try {
    const {
      cuisine,
      minRating,
      maxPrice,
      isOpen,
      search
    } = req.query;

    let query = {};

    if (cuisine) {
      query.cuisine = cuisine;
    }

    if (minRating) {
      query.rating = { $gte: parseFloat(minRating) };
    }

    if (maxPrice) {
      query['menuItems.price'] = { $lte: parseFloat(maxPrice) };
    }

    if (isOpen !== undefined) {
      query.isOpen = isOpen === 'true';
    }

    if (search) {
      query.$or = [
        { name: { $regex: search, $options: 'i' } },
        { cuisine: { $regex: search, $options: 'i' } }
      ];
    }

    const restaurants = await Restaurant.find(query);
    res.json(restaurants);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// services/paymentService.js
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

exports.processPayment = async (paymentMethodId, amount, currency = 'usd') => {
  try {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount * 100),
      currency,
      payment_method: paymentMethodId,
      confirm: true,
      return_url: 'https://your-website.com/payment-success'
    });

    return paymentIntent;
  } catch (error) {
    throw new Error(`Payment failed: ${error.message}`);
  }
};

// Updated controllers/orderController.js
const { orderValidation } = require('../validators/validation');
const paymentService = require('../services/paymentService');

exports.createOrder = async (req, res) => {
  try {
    const { error } = orderValidation.validate(req.body);
    if (error) {
      return res.status(400).json({ message: error.details[0].message });
    }

    const { restaurantId, items, paymentMethodId } = req.body;
    const userId = req.user.userId; // From auth middleware

    const restaurant = await Restaurant.findById(restaurantId);
    if (!restaurant) {
      return res.status(404).json({ message: 'Restaurant not found' });
    }

    if (!restaurant.isOpen) {
      return res.status(400).json({ message: 'Restaurant is closed' });
    }

    let totalAmount = 0;
    for (const item of items) {
      const menuItem = restaurant.menuItems.id(item.menuItem);
      if (!menuItem) {
        return res.status(404).json({ message: `Menu item not found` });
      }
      if (!menuItem.isAvailable) {
        return res.status(400).json({ message: `${menuItem.name} is not available` });
      }
      totalAmount += menuItem.price * item.quantity;
    }

    // Process payment
    try {
      await paymentService.processPayment(paymentMethodId, totalAmount);
    } catch (error) {
      return res.status(400).json({ message: error.message });
    }

    const order = new Order({
      restaurant: restaurantId,
      userId,
      items,
      totalAmount,
      status: 'confirmed' // Auto-confirm after successful payment
    });

    const savedOrder = await order.save();
    res.status(201).json(savedOrder);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Updated routes/index.js
const express = require('express');
const router = express.Router();
const { auth } = require('../middleware/auth');
const userController = require('../controllers/userController');
const restaurantController = require('../controllers/restaurantController');
const orderController = require('../controllers/orderController');

// Auth routes
router.post('/register', userController.register);
router.post('/login', userController.login);

// Restaurant routes
router.get('/restaurants', restaurantController.getAllRestaurants);
router.get('/restaurants/search', restaurantController.queryRestaurants);
router.get('/restaurants/:id', restaurantController.getRestaurantById);
router.post('/restaurants', auth, restaurantController.createRestaurant);
router.put('/restaurants/:id', auth, restaurantController.updateRestaurant);

// Order routes
router.post('/orders', auth, orderController.createOrder);
router.get('/orders/:id', auth, orderController.getOrderById);
router.put('/orders/:id/status', auth, orderController.updateOrderStatus);
router.get('/orders/user/:userId', auth, orderController.getUserOrders);

module.exports = router;
